import { signAdminPayload } from "./sign";

const BOT_TOKEN = process.env.BOT_TOKEN!;
const ADMIN_CHAT = Number(process.env.ADMIN_CHAT_ID || process.env.ADMIN_IDS?.split(",")[0] || 0);
const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Bot API
async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: any) {
  if (!BOT_TOKEN) {
    console.error('BOT_TOKEN is not set');
    return false;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
        reply_markup: replyMarkup,
        disable_web_page_preview: true
      })
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('Telegram API error:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    return false;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ
export async function notifyDepositAdmin(dep: { id: string; userId: number; amount: number; provider?: string }) {
  if (!ADMIN_CHAT || !BOT_TOKEN) {
    console.error('ADMIN_CHAT or BOT_TOKEN not set');
    return false;
  }

  try {
    const key = process.env.ADMIN_SIGN_KEY || "";
    const sig = signAdminPayload(
      { id: dep.id, user: dep.userId, amount: dep.amount },
      key
    );

    const approveUrl = `${BASE_URL}/api/deposit/approve?id=${dep.id}&sig=${sig}`;
    const declineUrl = `${BASE_URL}/api/deposit/decline?id=${dep.id}&sig=${sig}`;

    const message = `
üí∞ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>
‚îú ID: <code>${dep.id}</code>
‚îú User: <a href="tg://user?id=${dep.userId}">${dep.userId}</a>
‚îú –°—É–º–º–∞: <b>${dep.amount}‚ÇΩ</b>
‚îî –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${dep.provider || 'unknown'}

‚è∞ <i>${new Date().toLocaleString('ru-RU')}</i>
    `.trim();

    const success = await sendTelegramMessage(ADMIN_CHAT, message, {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", url: approveUrl },
          { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", url: declineUrl }
        ]
      ]
    });

    return success;
  } catch (error) {
    console.error('Error in notifyDepositAdmin:', error);
    return false;
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
export async function notifyUserDepositApproved(dep: { userId: number; amount: number; id: string }) {
  const message = `
‚úÖ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ!</b>
‚îú –°—É–º–º–∞: <b>${dep.amount}‚ÇΩ</b>
‚îú ID: <code>${dep.id}</code>
‚îî –î–∞—Ç–∞: <i>${new Date().toLocaleString('ru-RU')}</i>

üí° <i>–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞</i>
  `.trim();

  return await sendTelegramMessage(dep.userId, message);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
export async function notifyUserDepositDeclined(dep: { userId: number; amount: number; id: string }) {
  const message = `
‚ùå <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>
‚îú –°—É–º–º–∞: <b>${dep.amount}‚ÇΩ</b>
‚îú ID: <code>${dep.id}</code>
‚îî –î–∞—Ç–∞: <i>${new Date().toLocaleString('ru-RU')}</i>

üìû <i>–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</i>
  `.trim();

  return await sendTelegramMessage(dep.userId, message);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –≤—ã–≤–æ–¥–µ
export async function notifyWithdrawAdmin(req: { id: string; userId: number; amount: number; details?: any }) {
  if (!ADMIN_CHAT || !BOT_TOKEN) {
    console.error('ADMIN_CHAT or BOT_TOKEN not set');
    return false;
  }

  try {
    const key = process.env.ADMIN_SIGN_KEY || "";
    const sig = signAdminPayload(
      { id: req.id, user: req.userId, amount: req.amount },
      key
    );

    const approveUrl = `${BASE_URL}/api/withdraw/approve?id=${req.id}&sig=${sig}`;
    const declineUrl = `${BASE_URL}/api/withdraw/decline?id=${req.id}&sig=${sig}`;

    const detailsStr = req.details ? `\n‚îú –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>${JSON.stringify(req.details, null, 2).slice(0, 100)}...</code>` : '';

    const message = `
üí∏ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>
‚îú ID: <code>${req.id}</code>
‚îú User: <a href="tg://user?id=${req.userId}">${req.userId}</a>
‚îú –°—É–º–º–∞: <b>${req.amount}‚ÇΩ</b>${detailsStr}
‚îî –î–∞—Ç–∞: <i>${new Date().toLocaleString('ru-RU')}</i>
    `.trim();

    const success = await sendTelegramMessage(ADMIN_CHAT, message, {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", url: approveUrl },
          { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", url: declineUrl }
        ]
      ]
    });

    return success;
  } catch (error) {
    console.error('Error in notifyWithdrawAdmin:', error);
    return false;
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–≤–æ–¥–µ
export async function notifyUserWithdrawApproved(p: { userId: number; amount: number; id: string }) {
  const message = `
‚úÖ <b>–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>
‚îú –°—É–º–º–∞: <b>${p.amount}‚ÇΩ</b>
‚îú ID: <code>${p.id}</code>
‚îî –î–∞—Ç–∞: <i>${new Date().toLocaleString('ru-RU')}</i>

üí∏ <i>–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</i>
  `.trim();

  return await sendTelegramMessage(p.userId, message);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞
export async function notifyUserWithdrawDeclined(p: { userId: number; amount: number; id: string }) {
  const message = `
‚ùå <b>–í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>
‚îú –°—É–º–º–∞: <b>${p.amount}‚ÇΩ</b>
‚îú ID: <code>${p.id}</code>
‚îî –î–∞—Ç–∞: <i>${new Date().toLocaleString('ru-RU')}</i>

üí° <i>–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å</i>
  `.trim();

  return await sendTelegramMessage(p.userId, message);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
export async function notifyNewBet(bet: { userId: number; amount: number; chance: number; result: string; payout: number }) {
  if (!ADMIN_CHAT) return false;

  const message = `
üé∞ <b>–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞</b>
‚îú User: <a href="tg://user?id=${bet.userId}">${bet.userId}</a>
‚îú –°—Ç–∞–≤–∫–∞: <b>${bet.amount}‚ÇΩ</b>
‚îú –®–∞–Ω—Å: <b>${bet.chance}%</b>
‚îú –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>${bet.result === 'win' ? '‚úÖ –í—ã–∏–≥—Ä—ã—à' : '‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à'}</b>
‚îú –í—ã–ø–ª–∞—Ç–∞: <b>${bet.payout}‚ÇΩ</b>
‚îî –î–∞—Ç–∞: <i>${new Date().toLocaleString('ru-RU')}</i>
  `.trim();

  return await sendTelegramMessage(ADMIN_CHAT, message);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function notifyUserBetWin(userId: number, amount: number, payout: number) {
  const message = `
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–∏–≥—Ä—ã—à–µ–º!</b>
‚îú –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>${amount}‚ÇΩ</b>
‚îú –í—ã–∏–≥—Ä—ã—à: <b>${payout}‚ÇΩ</b>
‚îú –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${payout - amount}‚ÇΩ</b>
‚îî –î–∞—Ç–∞: <i>${new Date().toLocaleString('ru-RU')}</i>

üí∞ <i>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å</i>
  `.trim();

  return await sendTelegramMessage(userId, message);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function notifyUserBetLoss(userId: number, amount: number) {
  const message = `
üò¢ <b>–°—Ç–∞–≤–∫–∞ –Ω–µ —Å—ã–≥—Ä–∞–ª–∞</b>
‚îú –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <b>${amount}‚ÇΩ</b>
‚îî –î–∞—Ç–∞: <i>${new Date().toLocaleString('ru-RU')}</i>

üé∞ <i>–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!</i>
  `.trim();

  return await sendTelegramMessage(userId, message);
}