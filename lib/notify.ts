import { signAdmin } from "@/lib/sign";

const BOT = process.env.BOT_TOKEN!;
const ADMIN_CHAT = process.env.ADMIN_CHAT_ID ? Number(process.env.ADMIN_CHAT_ID) : undefined;
const ADMIN_SIGN_KEY = process.env.ADMIN_SIGN_KEY!;
const API = BOT ? `https://api.telegram.org/bot${BOT}` : "";

function getBaseUrl() {
  // –ù–∞ Vercel —Ç–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥-URL
  if (process.env.NEXT_PUBLIC_BASE_URL) return process.env.NEXT_PUBLIC_BASE_URL;
  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`;
  return ""; // –ª–æ–∫–∞–ª–∫–∞/–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
}

async function tgSend(chatId: number, payload: any) {
  if (!BOT || !chatId) return;
  try {
    await fetch(`${API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id: chatId, ...payload }),
    });
  } catch {
    /* ignore */
  }
}

export async function notifyDepositAdmin(dep: { id: string; userId: number; amount: number }) {
  if (!ADMIN_CHAT) return;

  const base = getBaseUrl();
  const sig = signAdmin(dep.id, ADMIN_SIGN_KEY);
  const approveUrl = `${base}/api/deposit/approve?id=${encodeURIComponent(dep.id)}&sig=${encodeURIComponent(sig)}`;
  const declineUrl = `${base}/api/deposit/decline?id=${encodeURIComponent(dep.id)}&sig=${encodeURIComponent(sig)}`;

  const text =
    `üßæ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n` +
    `ID: <code>${dep.id}</code>\n` +
    `User: <code>${dep.userId}</code>\n` +
    `–°—É–º–º–∞: <b>${dep.amount}‚ÇΩ</b>`;

  await tgSend(ADMIN_CHAT, {
    text,
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", url: approveUrl },
          { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",  url: declineUrl  },
        ],
      ],
    },
    disable_web_page_preview: true,
  });
}

export async function notifyUserDepositApproved(dep: { userId: number; amount: number }) {
  await tgSend(dep.userId, {
    text: `‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ ${dep.amount}‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å.`,
  });
}

export async function notifyUserDepositDeclined(dep: { userId: number; amount: number }) {
  await tgSend(dep.userId, {
    text: `‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${dep.amount}‚ÇΩ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.`,
  });
}