import { Telegraf } from 'telegraf';

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  throw new Error('BOT_TOKEN is not defined');
}

const bot = new Telegraf(BOT_TOKEN);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
  const webAppUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://gvsutionline.vercel.app';
  
  ctx.reply('üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!', {
    reply_markup: {
      keyboard: [
        [{
          text: 'üéÆ –ò–≥—Ä–∞—Ç—å',
          web_app: { url: webAppUrl }
        }]
      ],
      resize_keyboard: true
    }
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /balance
bot.command('balance', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –∑–∞–ø—Ä–æ—Å –∫ /api/balance
    ctx.reply('üí∞ –ë–∞–ª–∞–Ω—Å: –ø—Ä–æ–≤–µ—Ä–∫–∞...\n\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞');
  } catch (error) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
  ctx.reply(`ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å  
/help - –ü–æ–º–æ—â—å

üéÆ <b>–î–ª—è –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å"</b>

üìû <i>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @username</i>`, {
    parse_mode: 'HTML'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ web-app –¥–∞–Ω–Ω—ã—Ö
bot.on('web_app_data', (ctx) => {
  const data = ctx.webAppData?.data;
  if (data) {
    console.log('WebApp data received:', data);
    ctx.reply('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫)
bot.on('callback_query', async (ctx) => {
  await ctx.answerCbQuery();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø callback query
  if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
    const data = ctx.callbackQuery.data;
    console.log('Callback data:', data);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –¥–∞–Ω–Ω—ã–µ
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', async (ctx) => {
  ctx.reply('üíé –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å"');
});

bot.hears('üéÆ –ò–≥—Ä–∞—Ç—å', (ctx) => {
  const webAppUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://gvsutionline.vercel.app';
  ctx.reply('–û—Ç–∫—Ä—ã–≤–∞—é –∏–≥—Ä—É...', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export async function sendNotification(userId: number, message: string, options: any = {}) {
  if (!BOT_TOKEN) {
    console.error('BOT_TOKEN is not set');
    return false;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: userId,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options
      })
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('Telegram API error:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
export async function setWebhook() {
  // –ù–µ –ø—ã—Ç–∞—Ç—å—Å—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤–µ–±—Ö—É–∫ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ –∏–ª–∏ –±–µ–∑ URL
  if (!process.env.NEXT_PUBLIC_BASE_URL || process.env.NEXT_PUBLIC_BASE_URL.includes('undefined')) {
    console.log('‚ö†Ô∏è  Skipping webhook setup - BASE_URL not defined');
    return;
  }

  const webhookUrl = `${process.env.NEXT_PUBLIC_BASE_URL}/api/bot/webhook`;
  
  if (!webhookUrl || webhookUrl.includes('undefined')) {
    console.error('‚ùå Invalid webhook URL:', webhookUrl);
    return;
  }

  try {
    await bot.telegram.setWebhook(webhookUrl);
    console.log('‚úÖ Webhook set to:', webhookUrl);
  } catch (error: any) {
    console.error('‚ùå Webhook setup failed:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
export async function deleteWebhook() {
  try {
    await bot.telegram.deleteWebhook();
    console.log('‚úÖ Webhook deleted');
  } catch (error: any) {
    console.error('‚ùå Webhook deletion failed:', error.message);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ
export async function getWebhookInfo() {
  try {
    const info = await bot.telegram.getWebhookInfo();
    console.log('üìã Webhook info:', info);
    return info;
  } catch (error: any) {
    console.error('‚ùå Webhook info failed:', error.message);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
export function startPolling() {
  console.log('ü§ñ Starting bot in polling mode...');
  bot.launch()
    .then(() => console.log('‚úÖ Bot started in polling mode'))
    .catch((error) => console.error('‚ùå Bot startup failed:', error));

  // Graceful shutdown
  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API routes
export default bot;