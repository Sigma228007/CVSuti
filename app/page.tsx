'use client';

import React, { useEffect, useState } from 'react';

type BetResult = {
  ok: boolean;
  result?: 'win' | 'lose';
  chance?: number;
  rolled?: number;
  payout?: number;
  balanceDelta?: number;
  error?: string;
};

export default function Page() {
  const [balance, setBalance] = useState<number>(0);
  const [userData, setUserData] = useState<any>(null);
  const [uid, setUid] = useState<number | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [message, setMessage] = useState<string>('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞–≤–æ–∫
  const [betAmount, setBetAmount] = useState<number>(100);
  const [betChance, setBetChance] = useState<number>(50);
  const [betDirection, setBetDirection] = useState<'more' | 'less'>('more');
  const [lastBetResult, setLastBetResult] = useState<BetResult | null>(null);

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      const savedUser = localStorage.getItem('tg_user');
      const savedUid = localStorage.getItem('tg_uid');
      
      if (savedUser && savedUid) {
        setUserData(JSON.parse(savedUser));
        setUid(Number(savedUid));
        await fetchBalance();
      }
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  };

  const fetchBalance = async () => {
    try {
      const response = await fetch('/api/balance', {
        credentials: 'include' // –í–∞–∂–Ω–æ: –≤–∫–ª—é—á–∞–µ–º cookies
      });
      if (response.ok) {
        const data = await response.json();
        if (data.ok) {
          setBalance(data.balance);
        }
      } else {
        console.log('Balance fetch failed, trying to reauth...');
        await reauthenticate();
      }
    } catch (error) {
      console.error('Error fetching balance:', error);
    }
  };

  const reauthenticate = async () => {
    try {
      const tg = (window as any).Telegram?.WebApp;
      const initData = tg?.initData;
      
      if (initData) {
        const response = await fetch('/api/auth', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData }),
        });
        
        const data = await response.json();
        if (data.ok) {
          localStorage.setItem('tg_user', JSON.stringify(data.user));
          localStorage.setItem('tg_uid', data.uid.toString());
          setUserData(data.user);
          setUid(data.uid);
          setBalance(data.balance);
        }
      }
    } catch (error) {
      console.error('Reauth failed:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞–≤–∫–∏
  const placeBet = async () => {
    if (isLoading || !uid) return;
    
    setIsLoading(true);
    setLastBetResult(null);
    setMessage('');

    try {
      const tg = (window as any).Telegram?.WebApp;
      const initData = tg?.initData;

      if (!initData) {
        setMessage('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return;
      }

      const response = await fetch('/api/bet', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          initData,
          amount: betAmount,
          chance: betChance,
          dir: betDirection,
        }),
      });

      const result: BetResult = await response.json();
      setLastBetResult(result);

      if (result.ok) {
        await fetchBalance(); // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        
        // –í–∏–±—Ä–æ–æ—Ç–∫–ª–∏–∫ –≤ Telegram
        try {
          const tg = (window as any).Telegram?.WebApp;
          if (result.result === 'win') {
            tg?.HapticFeedback?.impactOccurred?.('heavy');
            setMessage(`üéâ –í—ã–∏–≥—Ä—ã—à! +${result.payout}‚ÇΩ`);
          } else {
            tg?.HapticFeedback?.impactOccurred?.('medium');
            setMessage(`üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: -${betAmount}‚ÇΩ`);
          }
        } catch {}
      } else {
        setMessage(`–û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (error: any) {
      setMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  const handleDeposit = async (amount: number) => {
    if (isLoading) return;
    
    setIsLoading(true);
    setMessage('');

    try {
      const response = await fetch('/api/deposit/create', {
        method: 'POST',
        credentials: 'include', // –í–∞–∂–Ω–æ: cookies
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ amount }),
      });

      const data = await response.json();

      if (data.ok) {
        window.location.href = `/pay/${data.deposit.id}?url=${encodeURIComponent(data.payUrl)}`;
      } else {
        if (data.error === 'no session') {
          await reauthenticate();
          setMessage('–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } else {
          setMessage(`–û—à–∏–±–∫–∞: ${data.error}`);
        }
      }
    } catch (err: any) {
      setMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
  const handleWithdraw = async (amount: number) => {
    if (isLoading || balance < amount) return;
    
    if (!confirm(`–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ ${amount}‚ÇΩ?`)) return;
    
    setIsLoading(true);
    setMessage('');

    try {
      const response = await fetch('/api/withdraw/create', {
        method: 'POST',
        credentials: 'include', // –í–∞–∂–Ω–æ: cookies
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          amount,
          details: { method: 'standard' }
        }),
      });

      const data = await response.json();

      if (data.ok) {
        setMessage(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞!`);
        await fetchBalance();
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
      }
    } catch (err: any) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  if (!uid) {
    return (
      <main className="center">
        <div className="card">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </main>
    );
  }

  return (
    <main className="container">
      {/* –®–∞–ø–∫–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º */}
      <div className="card lift">
        <div className="row between">
          <div>
            <div className="h1">GVSuti Casino</div>
            <div className="sub">–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –∫–ª—É–±</div>
          </div>
          <div style={{ textAlign: 'right' }}>
            <div className="h2">{balance.toFixed(2)} ‚ÇΩ</div>
            <div className="sub">–ë–∞–ª–∞–Ω—Å</div>
          </div>
        </div>

        {userData && (
          <div style={{ marginTop: '12px', paddingTop: '12px', borderTop: '1px solid rgba(255,255,255,0.1)' }}>
            <div className="row between">
              <span className="sub">–ò–≥—Ä–æ–∫:</span>
              <span>{userData.first_name} {userData.username ? `(@${userData.username})` : ''}</span>
            </div>
            <div className="row between">
              <span className="sub">UID:</span>
              <span>{uid}</span>
            </div>
          </div>
        )}
      </div>

      {/* –ö–ê–ó–ò–ù–û: –°—Ç–∞–≤–∫–∏ */}
      <div className="card">
        <div className="h2">üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</div>
        
        <div style={{ marginBottom: '16px' }}>
          <label className="label">–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏</label>
          <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
            {[10, 50, 100, 500, 1000].map((amount) => (
              <button
                key={amount}
                className={`chip ${betAmount === amount ? 'ok' : ''}`}
                onClick={() => setBetAmount(amount)}
                disabled={isLoading}
              >
                {amount}‚ÇΩ
              </button>
            ))}
          </div>
        </div>

        <div style={{ marginBottom: '16px' }}>
          <label className="label">–®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: {betChance}%</label>
          <input
            type="range"
            className="slider"
            value={betChance}
            onChange={(e) => setBetChance(Number(e.target.value))}
            min="5"
            max="95"
            step="5"
          />
        </div>

        <div style={{ marginBottom: '16px' }}>
          <label className="label">–°—Ç–∞–≤–∫–∞ –Ω–∞:</label>
          <div style={{ display: 'flex', gap: '8px' }}>
            <button
              className={`chip ${betDirection === 'more' ? 'ok' : ''}`}
              onClick={() => setBetDirection('more')}
              disabled={isLoading}
            >
              –ë–æ–ª—å—à–µ {betChance}%
            </button>
            <button
              className={`chip ${betDirection === 'less' ? 'ok' : ''}`}
              onClick={() => setBetDirection('less')}
              disabled={isLoading}
            >
              –ú–µ–Ω—å—à–µ {betChance}%
            </button>
          </div>
        </div>

        <button
          className="btn"
          onClick={placeBet}
          disabled={isLoading || balance < betAmount}
          style={{ width: '100%' }}
        >
          {isLoading ? 'üé≤ –ö—Ä—É—Ç–∏–º...' : `üéØ –ü–æ—Å—Ç–∞–≤–∏—Ç—å ${betAmount}‚ÇΩ`}
        </button>

        {lastBetResult && (
          <div className="info" style={{ marginTop: '12px', 
            borderColor: lastBetResult.result === 'win' ? '#22c55e' : '#ef4444' }}>
            {lastBetResult.result === 'win' ? (
              <span>‚úÖ –í—ã–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ: {lastBetResult.rolled} (+{lastBetResult.payout}‚ÇΩ)</span>
            ) : (
              <span>‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à. –í—ã–ø–∞–ª–æ: {lastBetResult.rolled}</span>
            )}
          </div>
        )}
      </div>

      {/* –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ */}
      <div className="card">
        <div className="h2">üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</div>
        <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
          {[100, 500, 1000, 2000, 5000].map((amount) => (
            <button
              key={amount}
              className="btn-outline"
              onClick={() => handleDeposit(amount)}
              disabled={isLoading}
              style={{ flex: '1', minWidth: '80px' }}
            >
              +{amount}‚ÇΩ
            </button>
          ))}
        </div>
      </div>

      {/* –í—ã–≤–æ–¥ */}
      <div className="card">
        <div className="h2">üèß –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</div>
        <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
          {[100, 500, 1000, 2000].map((amount) => (
            <button
              key={amount}
              className={`btn-outline ${balance < amount ? 'disabled' : ''}`}
              onClick={() => handleWithdraw(amount)}
              disabled={isLoading || balance < amount}
              style={{ flex: '1', minWidth: '80px' }}
            >
              -{amount}‚ÇΩ
            </button>
          ))}
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message && (
        <div className="card" style={{ 
          borderColor: message.includes('‚úÖ') || message.includes('üéâ') ? '#22c55e' : '#ef4444' 
        }}>
          <div className="sub">{message}</div>
        </div>
      )}

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="card">
        <div className="h2">üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</div>
        <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
          <button className="btn-outline" onClick={() => window.location.href = '/profile'}>
            –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
          </button>
          <button className="btn-outline" onClick={() => window.location.reload()}>
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>
    </main>
  );
}