'use client';

import React, { useEffect, useState } from 'react';

type BetResult = {
  ok: boolean;
  result?: 'win' | 'lose';
  chance?: number;
  rolled?: number;
  payout?: number;
  balanceDelta?: number;
  error?: string;
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function InitAuth() {
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        const tg = (window as any).Telegram?.WebApp;
        const initData = tg?.initData;
        
        if (initData) {
          const response = await fetch('/api/auth', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ initData }),
          });
          
          const data = await response.json();
          if (data.ok) {
            localStorage.setItem('tg_user', JSON.stringify(data.user));
            localStorage.setItem('tg_uid', data.uid.toString());
            localStorage.setItem('tg_token', data.token);
            
            if (!window.location.search.includes('token=')) {
              const newUrl = new URL(window.location.href);
              newUrl.searchParams.set('token', data.token);
              window.history.replaceState({}, '', newUrl.toString());
            }
          }
        }
      } catch (error) {
        console.error('Auth initialization failed:', error);
      }
    };

    initializeAuth();
  }, []);

  return null;
}

export default function Page() {
  const [balance, setBalance] = useState<number>(0);
  const [userData, setUserData] = useState<any>(null);
  const [uid, setUid] = useState<number | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [message, setMessage] = useState<string>('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞–≤–æ–∫
  const [betAmount, setBetAmount] = useState<string>('100'); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ string –¥–ª—è –≤–≤–æ–¥–∞
  const [betChance, setBetChance] = useState<number>(50);
  const [betDirection, setBetDirection] = useState<'more' | 'less'>('more');
  const [lastBetResult, setLastBetResult] = useState<BetResult | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/–≤—ã–≤–æ–¥–∞
  const [depositAmount, setDepositAmount] = useState<string>('500'); // –î–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
  const [withdrawAmount, setWithdrawAmount] = useState<string>('500'); // –î–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
  const [withdrawDetails, setWithdrawDetails] = useState<string>('');
  const [showWithdrawForm, setShowWithdrawForm] = useState<boolean>(false);

  // –õ–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–Ω–ª–∞–π–Ω
  const [activityFeed, setActivityFeed] = useState<any[]>([]);
  const [onlineCount, setOnlineCount] = useState<number>(50);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  const getAuthHeaders = () => {
    const token = localStorage.getItem('tg_token');
    const initData = (window as any).Telegram?.WebApp?.initData;
    
    return {
      'Content-Type': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` }),
      ...(initData && { 'X-Telegram-Init-Data': initData })
    };
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const generateActivityFeed = () => {
    const activities = [];
    const players = ['Alex', 'Maria', 'John', 'Anna', 'Mike', 'Sarah', 'David', 'Emma'];
    
    for (let i = 0; i < 15; i++) {
      activities.push({
        id: `game_${Date.now()}_${i}`,
        player: players[Math.floor(Math.random() * players.length)],
        amount: [10, 50, 100, 500, 1000][Math.floor(Math.random() * 5)],
        result: Math.random() > 0.4 ? 'win' : 'lose',
        payout: Math.floor(Math.random() * 2000),
        chance: [25, 50, 75, 90][Math.floor(Math.random() * 4)],
        timestamp: Date.now() - Math.random() * 3600000
      });
    }
    
    setActivityFeed(activities);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  useEffect(() => {
    generateActivityFeed();
    
    const activityInterval = setInterval(() => {
      setActivityFeed(prev => {
        const newActivity = {
          id: `game_${Date.now()}`,
          player: ['Alex', 'Maria', 'John', 'Anna'][Math.floor(Math.random() * 4)],
          amount: [50, 100, 200, 500][Math.floor(Math.random() * 4)],
          result: Math.random() > 0.4 ? 'win' : 'lose',
          payout: Math.floor(Math.random() * 1000),
          chance: [25, 50, 75][Math.floor(Math.random() * 3)],
          timestamp: Date.now()
        };
        return [newActivity, ...prev.slice(0, 14)];
      });
    }, 1000);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω
    const onlineInterval = setInterval(() => {
      setOnlineCount(prev => Math.min(100, Math.max(25, prev + (Math.random() > 0.5 ? 1 : -1))));
    }, 3000);

    return () => {
      clearInterval(activityInterval);
      clearInterval(onlineInterval);
    };
  }, []);

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      const savedUser = localStorage.getItem('tg_user');
      const savedUid = localStorage.getItem('tg_uid');
      
      if (savedUser && savedUid) {
        setUserData(JSON.parse(savedUser));
        setUid(Number(savedUid));
        await fetchBalance();
      } else {
        await reauthenticate();
      }
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  };

  const fetchBalance = async () => {
    try {
      const response = await fetch('/api/balance', {
        headers: getAuthHeaders()
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.ok) {
          setBalance(data.balance);
        }
      } else {
        console.log('Balance fetch failed, trying to reauth...');
        await reauthenticate();
      }
    } catch (error) {
      console.error('Error fetching balance:', error);
    }
  };

  const reauthenticate = async () => {
    try {
      const tg = (window as any).Telegram?.WebApp;
      const initData = tg?.initData;
      
      if (initData) {
        const response = await fetch('/api/auth', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData }),
        });
        
        const data = await response.json();
        if (data.ok) {
          localStorage.setItem('tg_user', JSON.stringify(data.user));
          localStorage.setItem('tg_uid', data.uid.toString());
          localStorage.setItem('tg_token', data.token);
          setUserData(data.user);
          setUid(data.uid);
          setBalance(data.balance);
        }
      }
    } catch (error) {
      console.error('Reauth failed:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞–≤–∫–∏
  const placeBet = async () => {
    const amountNum = parseInt(betAmount);
    if (isLoading || !uid || !amountNum || amountNum <= 0) return;
    
    setIsLoading(true);
    setLastBetResult(null);
    setMessage('');

    try {
      const response = await fetch('/api/bet', {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify({
          amount: amountNum,
          chance: betChance,
          dir: betDirection,
        }),
      });

      const result: BetResult = await response.json();
      setLastBetResult(result);

      if (result.ok) {
        await fetchBalance();
        
        try {
          const tg = (window as any).Telegram?.WebApp;
          if (result.result === 'win') {
            tg?.HapticFeedback?.impactOccurred?.('heavy');
            setMessage(`üéâ –í—ã–∏–≥—Ä—ã—à! +${result.payout}‚ÇΩ`);
          } else {
            tg?.HapticFeedback?.impactOccurred?.('medium');
            setMessage(`üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à: -${amountNum}‚ÇΩ`);
          }
        } catch {}
      } else {
        setMessage(`–û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (error: any) {
      setMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FreeKassa
  const handleDeposit = async () => {
    const amountNum = parseInt(depositAmount);
    if (isLoading || !amountNum || amountNum <= 0) return;
    
    setIsLoading(true);
    setMessage('');

    try {
      const response = await fetch('/api/deposit/create', {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify({ amount: amountNum }),
      });

      const data = await response.json();

      if (data.ok) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã FreeKassa
        window.location.href = data.payUrl;
      } else {
        if (data.error === 'unauthorized') {
          await reauthenticate();
          setMessage('–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } else {
          setMessage(`–û—à–∏–±–∫–∞: ${data.error}`);
        }
      }
    } catch (err: any) {
      setMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –†–µ–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
  const handleWithdraw = async () => {
    const amountNum = parseInt(withdrawAmount);
    if (isLoading || !uid || !amountNum || amountNum <= 0 || balance < amountNum) return;
    
    if (!withdrawDetails.trim()) {
      setMessage('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞');
      return;
    }
    
    setIsLoading(true);
    setMessage('');

    try {
      const response = await fetch('/api/withdraw/create', {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify({ 
          amount: amountNum,
          details: withdrawDetails
        }),
      });

      const data = await response.json();

      if (data.ok) {
        setMessage(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amountNum}‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.`);
        await fetchBalance();
        setShowWithdrawForm(false);
        setWithdrawDetails('');
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –±–æ—Ç–∞)
        console.log('üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –≤—ã–≤–æ–¥–µ:', {
          userId: uid,
          amount: amountNum,
          details: withdrawDetails
        });
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
      }
    } catch (err: any) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  if (!uid) {
    return (
      <main className="center">
        <InitAuth />
        <div className="card">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </main>
    );
  }

  return (
    <main className="container">
      <InitAuth />
      
      {/* –®–∞–ø–∫–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
      <div className="card lift">
        <div className="row between">
          <div>
            <div className="h1">GVSuti Casino</div>
            <div className="sub">–û–Ω–ª–∞–π–Ω: {onlineCount} üë• | –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º</div>
          </div>
          <div style={{ textAlign: 'right' }}>
            <div className="h2">{balance.toFixed(2)} ‚ÇΩ</div>
            <div className="sub">–í–∞—à –±–∞–ª–∞–Ω—Å</div>
          </div>
        </div>

        {userData && (
          <div style={{ marginTop: '12px', paddingTop: '12px', borderTop: '1px solid rgba(255,255,255,0.1)' }}>
            <div className="row between">
              <span className="sub">–ò–≥—Ä–æ–∫:</span>
              <span>{userData.first_name} {userData.username ? `(@${userData.username})` : ''}</span>
            </div>
            <div className="row between">
              <span className="sub">UID:</span>
              <span>{uid}</span>
            </div>
          </div>
        )}
      </div>

      <div className="grid">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª */}
        <div>
          {/* –ö–ê–ó–ò–ù–û: –°—Ç–∞–≤–∫–∏ */}
          <div className="card">
            <div className="h2">üé∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</div>
            
            <div style={{ marginBottom: '16px' }}>
              <label className="label">–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ (–≤–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é)</label>
              <input
                type="number"
                className="input"
                value={betAmount}
                onChange={(e) => setBetAmount(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏"
                min="10"
                max="10000"
              />
            </div>

            <div style={{ marginBottom: '16px' }}>
              <label className="label">–®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: {betChance}%</label>
              <input
                type="range"
                className="slider"
                value={betChance}
                onChange={(e) => setBetChance(Number(e.target.value))}
                min="5"
                max="95"
                step="5"
              />
            </div>

            <div style={{ marginBottom: '16px' }}>
              <label className="label">–°—Ç–∞–≤–∫–∞ –Ω–∞:</label>
              <div style={{ display: 'flex', gap: '8px' }}>
                <button
                  className={`chip ${betDirection === 'more' ? 'active' : ''}`}
                  onClick={() => setBetDirection('more')}
                  disabled={isLoading}
                >
                  –ë–æ–ª—å—à–µ {betChance}%
                </button>
                <button
                  className={`chip ${betDirection === 'less' ? 'active' : ''}`}
                  onClick={() => setBetDirection('less')}
                  disabled={isLoading}
                >
                  –ú–µ–Ω—å—à–µ {betChance}%
                </button>
              </div>
            </div>

            <button
              className="btn"
              onClick={placeBet}
              disabled={isLoading || balance < parseInt(betAmount) || !betAmount}
              style={{ width: '100%' }}
            >
              {isLoading ? 'üé≤ –ö—Ä—É—Ç–∏–º...' : `üéØ –ü–æ—Å—Ç–∞–≤–∏—Ç—å ${betAmount}‚ÇΩ`}
            </button>

            {lastBetResult && (
              <div className="info" style={{ marginTop: '12px', 
                borderColor: lastBetResult.result === 'win' ? '#22c55e' : '#ef4444' }}>
                {lastBetResult.result === 'win' ? (
                  <span>‚úÖ –í—ã–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ: {lastBetResult.rolled} (+{lastBetResult.payout}‚ÇΩ)</span>
                ) : (
                  <span>‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à. –í—ã–ø–∞–ª–æ: {lastBetResult.rolled}</span>
                )}
              </div>
            )}
          </div>

          {/* –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ */}
          <div className="card">
            <div className="h2">üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</div>
            
            {/* –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ */}
            <div style={{ marginBottom: '20px' }}>
              <label className="label">–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–ª—é–±–∞—è —Å—É–º–º–∞)</label>
              <input
                type="number"
                className="input"
                value={depositAmount}
                onChange={(e) => setDepositAmount(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
                min="10"
                style={{ marginBottom: '10px' }}
              />
              <button
                className="btn"
                onClick={handleDeposit}
                disabled={isLoading || !depositAmount}
                style={{ width: '100%', background: 'linear-gradient(45deg, #10b981, #34d399)' }}
              >
                üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ FreeKassa
              </button>
            </div>

            {/* –í—ã–≤–æ–¥ */}
            <div>
              <label className="label">–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</label>
              {!showWithdrawForm ? (
                <div>
                  <input
                    type="number"
                    className="input"
                    value={withdrawAmount}
                    onChange={(e) => setWithdrawAmount(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞"
                    min="10"
                    style={{ marginBottom: '10px' }}
                  />
                  <button
                    className="btn"
                    onClick={() => setShowWithdrawForm(true)}
                    disabled={isLoading || balance < parseInt(withdrawAmount) || !withdrawAmount}
                    style={{ width: '100%', background: 'linear-gradient(45deg, #f97316, #fb923c)' }}
                  >
                    üèß –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–≤–æ–¥
                  </button>
                </div>
              ) : (
                <div>
                  <input
                    type="text"
                    className="input"
                    value={withdrawDetails}
                    onChange={(e) => setWithdrawDetails(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–∫–∞—Ä—Ç–∞, –∫–æ—à–µ–ª–µ–∫)"
                    style={{ marginBottom: '10px' }}
                  />
                  <div style={{ display: 'flex', gap: '8px' }}>
                    <button
                      className="btn"
                      onClick={handleWithdraw}
                      disabled={isLoading}
                      style={{ flex: 1, background: 'linear-gradient(45deg, #10b981, #34d399)' }}
                    >
                      ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                    </button>
                    <button
                      className="btn"
                      onClick={() => setShowWithdrawForm(false)}
                      style={{ flex: 1, background: 'linear-gradient(45deg, #6b7280, #9ca3af)' }}
                    >
                      ‚ùå –û—Ç–º–µ–Ω–∞
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –õ–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
        <div className="card">
          <div className="h2">üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤</div>
          <div className="sub">–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</div>
          
          <div style={{ maxHeight: '500px', overflowY: 'auto', marginTop: '12px' }}>
            {activityFeed.map((activity, index) => (
              <div key={activity.id} style={{
                background: 'rgba(255,255,255,0.03)',
                padding: '10px',
                borderRadius: '8px',
                marginBottom: '8px',
                borderLeft: `3px solid ${activity.result === 'win' ? '#22c55e' : '#ef4444'}`,
                animation: 'fadeIn 0.5s ease'
              }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <span style={{ fontWeight: 'bold' }}>{activity.player}</span>
                  <span>{activity.amount}‚ÇΩ</span>
                </div>
                <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '12px', opacity: 0.8 }}>
                  <span>–®–∞–Ω—Å: {activity.chance}%</span>
                  <span style={{ color: activity.result === 'win' ? '#22c55e' : '#ef4444' }}>
                    {activity.result === 'win' ? `+${activity.payout}‚ÇΩ` : '–ü—Ä–æ–∏–≥—Ä—ã—à'}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message && (
        <div className="card" style={{ 
          borderColor: message.includes('‚úÖ') || message.includes('üéâ') ? '#22c55e' : '#ef4444',
          marginTop: '16px'
        }}>
          <div className="sub">{message}</div>
        </div>
      )}
    </main>
  );
}