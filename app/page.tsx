'use client';

import React, { useEffect, useState } from 'react';

export default function Page() {
  const [balance, setBalance] = useState<number>(0);
  const [userData, setUserData] = useState<any>(null);
  const [uid, setUid] = useState<number | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [message, setMessage] = useState<string>('');

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      const savedUser = localStorage.getItem('tg_user');
      const savedUid = localStorage.getItem('tg_uid');
      
      if (savedUser && savedUid) {
        setUserData(JSON.parse(savedUser));
        setUid(Number(savedUid));
        await fetchBalance(Number(savedUid));
      }
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  };

  const fetchBalance = async (userId: number) => {
    try {
      const response = await fetch('/api/balance');
      if (response.ok) {
        const data = await response.json();
        if (data.ok) {
          setBalance(data.balance);
        }
      }
    } catch (error) {
      console.error('Error fetching balance:', error);
    }
  };

  // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  const handleDeposit = async (amount: number) => {
    if (isLoading) return;
    
    setIsLoading(true);
    setMessage('');

    try {
      const response = await fetch('/api/deposit/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ amount }),
      });

      const data = await response.json();

      if (data.ok) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        window.location.href = `/pay/${data.deposit.id}?url=${encodeURIComponent(data.payUrl)}`;
      } else {
        setMessage(`–û—à–∏–±–∫–∞: ${data.error}`);
      }
    } catch (err: any) {
      setMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
  const handleWithdraw = async (amount: number) => {
    if (isLoading || balance < amount) return;
    
    if (!confirm(`–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ ${amount}‚ÇΩ?`)) return;
    
    setIsLoading(true);
    setMessage('');

    try {
      const response = await fetch('/api/withdraw/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          amount,
          details: { method: 'standard' }
        }),
      });

      const data = await response.json();

      if (data.ok) {
        setMessage(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`);
        await fetchBalance(uid!);
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
      }
    } catch (err: any) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  if (!uid) {
    return (
      <main className="center">
        <div className="card" style={{ textAlign: 'center', padding: '40px' }}>
          <div className="h2">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </main>
    );
  }

  return (
    <main className="container">
      {/* –®–∞–ø–∫–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º */}
      <div className="card lift">
        <div className="row between">
          <div>
            <div className="h1">GVSuti</div>
            <div className="sub">–ú–∏–Ω–∏-–∫–∞–∑–∏–Ω–æ</div>
          </div>
          <div style={{ textAlign: 'right' }}>
            <div className="h2">{balance.toFixed(2)} ‚ÇΩ</div>
            <div className="sub">–ë–∞–ª–∞–Ω—Å</div>
          </div>
        </div>

        {userData && (
          <div style={{ marginTop: '12px', paddingTop: '12px', borderTop: '1px solid rgba(255,255,255,0.1)' }}>
            <div className="row between">
              <span className="sub">–ò–≥—Ä–æ–∫:</span>
              <span>{userData.first_name} {userData.username ? `(@${userData.username})` : ''}</span>
            </div>
            <div className="row between">
              <span className="sub">UID:</span>
              <span>{uid}</span>
            </div>
          </div>
        )}
      </div>

      {/* –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ */}
      <div className="card">
        <div className="h2">–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</div>
        <div className="sub">–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</div>
        
        <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap', marginTop: '16px' }}>
          {[100, 500, 1000, 2000, 5000].map((amount) => (
            <button
              key={amount}
              className="btn"
              onClick={() => handleDeposit(amount)}
              disabled={isLoading}
              style={{ flex: '1', minWidth: '80px' }}
            >
              +{amount}‚ÇΩ
            </button>
          ))}
        </div>
      </div>

      {/* –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ */}
      <div className="card">
        <div className="h2">–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</div>
        <div className="sub">–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)</div>
        
        <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap', marginTop: '16px' }}>
          {[100, 500, 1000, 2000].map((amount) => (
            <button
              key={amount}
              className={`btn-outline ${balance < amount ? 'disabled' : ''}`}
              onClick={() => handleWithdraw(amount)}
              disabled={isLoading || balance < amount}
              style={{ flex: '1', minWidth: '80px' }}
            >
              -{amount}‚ÇΩ
            </button>
          ))}
        </div>

        {balance < 100 && (
          <div className="info" style={{ marginTop: '12px' }}>
            –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 100‚ÇΩ
          </div>
        )}
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="card">
        <div className="h2">–î–µ–π—Å—Ç–≤–∏—è</div>
        <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
          <button 
            className="btn-outline" 
            onClick={() => window.location.href = '/profile'}
          >
            üìä –ü—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—è
          </button>
          <button 
            className="btn-outline"
            onClick={() => {
              localStorage.clear();
              window.location.reload();
            }}
          >
            üîê –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message && (
        <div className="card" style={{ borderColor: message.includes('‚úÖ') ? '#22c55e' : '#ef4444' }}>
          <div className="sub">{message}</div>
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="card">
        <div className="h2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
        <div className="sub" style={{ lineHeight: '1.5' }}>
          ‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FreeKassa<br/>
          ‚Ä¢ –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é<br/>
          ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @{process.env.NEXT_PUBLIC_BOT_NAME || 'admin'}
        </div>
      </div>
    </main>
  );
}