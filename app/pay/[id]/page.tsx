'use client';

import React, { useEffect, useState } from 'react';
import { useParams, useRouter, useSearchParams } from 'next/navigation';

function openBotDeepLink(bot: string, payload: string) {
  const botName = bot.replace(/^@/, '');
  const link = `https://t.me/${botName}?startapp=${encodeURIComponent(payload)}`;
  const tg = (window as any)?.Telegram?.WebApp;

  // ‚úÖ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π¬ª –ø—É—Ç—å ‚Äî –ø–æ—Ä—É—á–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å–∞–º–æ–º—É Telegram
  if (tg?.openTelegramLink) {
    tg.openTelegramLink(link);
    try { tg.close(); } catch {}
    return;
  }

  // üîÅ –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –¥–ª—è —Ä–µ–¥–∫–∏—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π: –ø–æ–∫–∞–∂–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  alert('–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n' + link);
}

export default function PayPage() {
  const { id } = useParams<{ id: string }>();
  const router = useRouter();
  const sp = useSearchParams();

  const [status, setStatus] = useState<'pending' | 'approved' | 'declined' | 'loading'>('loading');
  const [amount, setAmount] = useState<number | null>(null);
  const [opening, setOpening] = useState(false);

  // URL –∫–∞—Å—Å—ã –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–π: /pay/[id]?url=...
  const payUrl = sp.get('url') || '';

  // –ü—É–ª–ª–∏–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞
  useEffect(() => {
    let stop = false;
    async function tick() {
      try {
        const r = await fetch(`/api/pay/status?id=${encodeURIComponent(id)}`, { cache: 'no-store' });
        const d = await r.json();
        if (!stop && d?.ok) {
          setStatus(d.status);
          setAmount(d.amount);
        }
      } catch {}
    }
    tick();
    const t = setInterval(tick, 2000);
    return () => { stop = true; clearInterval(t); };
  }, [id]);

  // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ deep-link
  useEffect(() => {
    if (status !== 'approved') return;
    const bot = (process.env.NEXT_PUBLIC_BOT_NAME || '').trim();
    const amt = amount ?? 0;

    if (bot) {
      const timer = setTimeout(() => openBotDeepLink(bot, `paid_${id}_${amt}`), 500);
      return () => clearTimeout(timer);
    }

    // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –º—è–≥–∫–∏–π –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å (–æ—Å—Ç–∞–Ω–µ–º—Å—è –Ω–∞ —Å–∞–π—Ç–µ)
    const timer = setTimeout(() => {
      const q = new URLSearchParams({ paid: '1', amt: String(amt), t: String(Date.now()) });
      router.replace('/?' + q.toString());
    }, 800);
    return () => clearTimeout(timer);
  }, [status, amount, id, router]);

  function openInside() {
    if (!payUrl) return;
    setOpening(true);
    const tg = (window as any)?.Telegram?.WebApp;
    try {
      if (tg) {
        // –í–Ω—É—Ç—Ä–∏ Telegram webview –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Å—Å—É –≤ —ç—Ç–æ–º –∂–µ –æ–∫–Ω–µ
        window.location.href = payUrl;
      } else {
        // –ü–ö/–æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
        window.open(payUrl, '_blank', 'noopener,noreferrer');
      }
    } catch {
      window.open(payUrl, '_blank', 'noopener,noreferrer');
    }
  }

  if (status === 'loading') {
    return <div className="center"><div className="card">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div></div>;
  }

  if (status === 'approved') {
    return (
      <div className="center">
        <div className="card fade-in">
          <div className="h2">‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞</div>
          <div className="sub">–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ‚Ä¶</div>
        </div>
      </div>
    );
  }

  if (status === 'declined') {
    return (
      <div className="center">
        <div className="card fade-in">
          <div className="h2">‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω</div>
          <div className="sub">–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</div>
          <div style={{ marginTop: 12 }}>
            <button className="btn" onClick={() => router.push('/')}>–ù–∞ –≥–ª–∞–≤–Ω—É—é</button>
          </div>
        </div>
      </div>
    );
  }

  // pending
  return (
    <main className="center">
      <div className="card fade-in">
        <div className="h2">–û–ø–ª–∞—Ç–∞ {amount ? `${amount} ‚ÇΩ` : ''}</div>
        <div className="sub" style={{ marginBottom: 12 }}>
          –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Å—Å—É¬ª. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        </div>

        <button className="btn" onClick={openInside} disabled={!payUrl || opening}>
          {opening ? '–û—Ç–∫—Ä—ã–≤–∞—é‚Ä¶' : '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Å—Å—É'}
        </button>

        {process.env.NEXT_PUBLIC_ALLOW_TEST_PAY === '1' && (
          <div style={{ marginTop: 12 }}>
            <button
              className="btn-outline"
              onClick={async () => {
                try {
                  const res = await fetch('/api/dev/fk/simulate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id, amount }),
                  });
                  const data = await res.json();
                  if (!res.ok || !data?.ok) {
                    alert('–°–∏–º—É–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ' + (data?.error || res.status));
                    return;
                  }
                  const r = await fetch(`/api/pay/status?id=${encodeURIComponent(id)}`, { cache: 'no-store' });
                  const d = await r.json();
                  if (r.ok && d?.ok) {
                    setStatus(d.status);
                    setAmount(d.amount);
                  }
                } catch (e: any) {
                  alert('–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: ' + (e?.message || e));
                }
              }}
            >
              –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å callback FK (dev)
            </button>
          </div>
        )}

        <div className="ticker" style={{ marginTop: 16 }}>
          <div>–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã‚Ä¶ ‚Ä¢ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Ä¢ </div>
        </div>

        <div style={{ marginTop: 14 }}>
          <button className="btn-outline" onClick={() => router.push('/')}>–û—Ç–º–µ–Ω–∞</button>
        </div>
      </div>
    </main>
  );
}